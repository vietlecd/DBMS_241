CREATE TABLE User(
    id INT PRIMARY KEY AUTO_INCREMENT,
    fullname VARCHAR(100) DEFAULT '',
    username VARCHAR(10) NOT NULL,
    password VARCHAR(100) NOT NULL DEFAULT '',
    role_id INT,
    created_at DATETIME,
    updated_at DATETIME,
    is_active TINYINT(1) DEFAULT 1
);
CREATE TABLE Roles(
    id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL 
);
ALTER TABLE User ADD FOREIGN KEY (role_id) REFERENCES Roles (id);

CREATE TABLE Audience (
    id INT,
    friend INT,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (friend) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (id, friend)
);

CREATE TABLE Author (
    authorID INT PRIMARY KEY AUTO_INCREMENT,
    id INT UNIQUE NOT NULL,
    bio TEXT,
    IDCard VARCHAR(255),
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Book (
    bookID INT PRIMARY KEY AUTO_INCREMENT,
    bTitle VARCHAR(255) NOT NULL,
    bDescription TEXT,
    coverImage VARCHAR(255),
    publishYear INT
);

CREATE TABLE ListOfReading (
    listID INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    createDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Include (
    bookID INT,
    listID INT,
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (listID) REFERENCES ListOfReading(listID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (bookID, listID)
);

CREATE TABLE UserBookmarks (
    ubID INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    createDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Marks (
    ubID INT,
    bookID INT,
    FOREIGN KEY (ubID) REFERENCES UserBookmarks(ubID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (ubID, bookID)
);

CREATE TABLE Report (
    rpID INT PRIMARY KEY AUTO_INCREMENT,
    bookID INT,
    id INT,
    reportDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    reportContent TEXT,
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Review (
    reviewID INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    bookID INT,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Category (
    cateID INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    cateDescription TEXT
);

CREATE TABLE Cate (
    bookID INT,
    cateID INT,
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (cateID) REFERENCES Category(cateID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (bookID, cateID)
);

CREATE TABLE Chapter (
    cID INT PRIMARY KEY AUTO_INCREMENT,
    bookID INT,
    cTitle VARCHAR(255),
    cContent TEXT,
    Fee DECIMAL(10, 2),
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Point (
    pointID INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    amount DECIMAL(10, 2),
    type VARCHAR(50),
    viewCount INT DEFAULT 0,
    adPoint DECIMAL(10, 2) DEFAULT 0,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Payment (
    PayID INT PRIMARY KEY AUTO_INCREMENT,
    id INT,
    PayType VARCHAR(50),
    PayAmount DECIMAL(10, 2),
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE DepositWithdraw (
    PayID INT,
    pointID INT,
    isAuthor BOOLEAN,
    FOREIGN KEY (PayID) REFERENCES Payment(PayID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (pointID) REFERENCES Point(pointID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (PayID, pointID)
);

CREATE TABLE Claim (
    id INT,
    pointID INT,
    Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (pointID) REFERENCES Point(pointID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (id, pointID)
);

CREATE TABLE WriteTranslate (
    bookID INT,
    authorID INT,
    FOREIGN KEY (bookID) REFERENCES Book(bookID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (authorID) REFERENCES Author(authorID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (bookID, authorID)
);

CREATE TABLE Payfor (
    pointID INT,
    payID INT,
    cID INT,
    FOREIGN KEY (pointID) REFERENCES Point(pointID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (payID) REFERENCES Payment(PayID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (cID) REFERENCES Chapter(cID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (pointID, payID, cID)
);
